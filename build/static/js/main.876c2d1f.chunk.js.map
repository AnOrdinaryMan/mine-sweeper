{"version":3,"sources":["pages/index/index.js","App.js","index.js"],"names":["Index","restart","init","setState","flagCount","boomRow","boomColumn","state","row","column","mineCount","table","Array","this","fill","map","i","length","j","obj","Object","create","selected","hasMine","hasFlag","number","randomRow","Math","floor","random","randomColumn","m","n","console","log","e","isNaN","parseInt","target","value","alert","String","temp","button","setTimeout","fastForward","mineSweeperTable","rowIndex","className","key","item","columnIndex","onMouseUp","style","backgroundColor","onClick","onChange","onRowChange","onColumnChange","onMineCountChange","onContextMenu","preventDefault","width","height","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.876c2d1f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './index.css'\r\n\r\nclass Index extends React.Component {\r\n    constructor () {\r\n        super();\r\n        this.state = {\r\n            // 行数\r\n            row: 10,\r\n            // 列数\r\n            column: 10,\r\n            // 雷数\r\n            mineCount: 10,\r\n            // 表格\r\n            table: [[]],\r\n            // 旗子数\r\n            flagCount: 0,\r\n            // 保存爆炸的地点\r\n            boomRow: -1,\r\n            boomColumn: -1\r\n        }\r\n    }\r\n\r\n    init () {\r\n        // 表格初始化\r\n        let table = new Array(this.state.row).fill(null);\r\n        table = table.map(() => new Array(this.state.column).fill(null));\r\n        for (let i = 0; i < table.length; i++) {\r\n            for (let j = 0; j < table[i].length; j++) {\r\n                let obj = Object.create(null);\r\n\r\n                obj.selected = false; // 是否已点击\r\n                obj.hasMine = false; // 是否藏有地雷\r\n                obj.hasFlag = false; // 是否标记旗子\r\n                obj.number = 0; // 九宫格内地雷的数量\r\n\r\n                table[i][j] = obj;\r\n            }\r\n        }\r\n\r\n        // 随机布雷 💣\r\n        let mineCount = this.state.mineCount;\r\n        while (mineCount) {\r\n            let randomRow = Math.floor(Math.random() * this.state.row);\r\n            let randomColumn = Math.floor(Math.random() * this.state.column);\r\n            if (table[randomRow][randomColumn].hasMine) {\r\n                continue;\r\n            }\r\n            table[randomRow][randomColumn].hasMine = true;\r\n            mineCount--;\r\n        }\r\n\r\n        // 生成九宫格内地雷的数量\r\n        for (let i = 0; i < table.length; i++) {\r\n            for (let j = 0; j < table[i].length; j++) {\r\n                // 若此格为地雷，跳过\r\n                if (table[i][j].hasMine) {\r\n                    continue;\r\n                }\r\n                // 遍历九宫格\r\n                for (let m = i - 1; m <= i + 1; m++) {\r\n                    for (let n = j - 1; n <= j + 1; n++) {\r\n                        // 处理边界情况\r\n                        if (m < 0 || m >= this.state.row || n < 0 || n >= this.state.column) {\r\n                            continue;\r\n                        }\r\n                        if (table[m][n].hasMine) {\r\n                            table[i][j].number += 1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            table: table\r\n        }, () => { console.log(this.state.table) });\r\n    }\r\n\r\n    componentWillMount () {\r\n        this.init();\r\n    }\r\n\r\n    // 重新开始\r\n    restart = () => {\r\n        this.init();\r\n        this.setState({\r\n            flagCount: 0,\r\n            boomRow: -1,\r\n            boomColumn: -1\r\n        })\r\n    }\r\n\r\n    // 修改行数\r\n    onRowChange (e) {\r\n        if (isNaN(parseInt(e.target.value))) {\r\n            this.setState({\r\n                row: 1,\r\n                mineCount: 1\r\n            }, () => {\r\n                this.init();\r\n            });\r\n        } else {\r\n            if (parseInt(e.target.value) > 99) {\r\n                alert('行数不能超过99！');\r\n                return;\r\n            }\r\n            if (String(parseInt(e.target.value)).length !== e.target.value.length) {\r\n                return;\r\n            }\r\n            this.setState({\r\n                row: parseInt(e.target.value),\r\n                mineCount: 1\r\n            }, () => {\r\n                this.init();\r\n            });\r\n        }\r\n    }\r\n\r\n    // 修改列数\r\n    onColumnChange (e) {\r\n        if (isNaN(parseInt(e.target.value))) {\r\n            this.setState({\r\n                column: 1,\r\n                mineCount: 1\r\n            }, () => {\r\n                this.init();\r\n            });\r\n        } else {\r\n            if (parseInt(e.target.value) > 99) {\r\n                alert('列数不能超过99！');\r\n                return;\r\n            }\r\n            if (String(parseInt(e.target.value)).length !== e.target.value.length) {\r\n                return;\r\n            }\r\n            this.setState({\r\n                column: parseInt(e.target.value),\r\n                mineCount: 1\r\n            }, () => {\r\n                this.init();\r\n            });\r\n        }\r\n    }\r\n\r\n    // 修改雷数\r\n    onMineCountChange (e) {\r\n        if (isNaN(parseInt(e.target.value))) {\r\n            this.setState({\r\n                mineCount: 1\r\n            }, () => {\r\n                this.init();\r\n            });\r\n        } else {\r\n            if (parseInt(e.target.value) > this.state.row * this.state.column) {\r\n                alert('雷数不能超过格子的数量！');\r\n                return;\r\n            }\r\n            this.setState({\r\n                mineCount: parseInt(e.target.value)\r\n            }, () => {\r\n                this.init();\r\n            });\r\n        }\r\n    }\r\n\r\n    onMouseUp (row, column, e) {\r\n        console.log(row, column);\r\n        let temp = this.state.table;\r\n\r\n        if (e.button === 2) { // 右击标记旗子\r\n            // 若已左击过，无法标记旗子\r\n            if (temp[row][column].selected === false) {\r\n                if (temp[row][column].hasFlag) {\r\n                    this.setState({\r\n                        flagCount: this.state.flagCount - 1\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        flagCount: this.state.flagCount + 1\r\n                    })\r\n                }\r\n                temp[row][column].hasFlag = !temp[row][column].hasFlag;\r\n            }\r\n        } else { // 左击\r\n            // 若已左击过，无法左击\r\n            // 若已标记旗子，无法左击\r\n            if (temp[row][column].selected === false && temp[row][column].hasFlag === false) {\r\n                // 击中地雷，游戏结束\r\n                if (temp[row][column].hasMine) {\r\n                    for (let i = 0; i < temp.length; i++) {\r\n                        for (let j = 0; j < temp[i].length; j++) {\r\n                            temp[i][j].hasFlag = false;\r\n                            temp[i][j].selected = true;\r\n                        }\r\n                    }\r\n                    // 记录爆炸的地点\r\n                    this.setState({\r\n                        boomRow: row,\r\n                        boomColumn: column\r\n                    })\r\n\r\n                    setTimeout(() => {\r\n                        alert('💣💣💣 Boom ！！！');\r\n                    });\r\n                } else { // 未击中地雷\r\n                    // 击中空方块，快进，以该空方快为中心快速扫雷打开一片空区域\r\n                    if (temp[row][column].number === 0) {\r\n                        this.fastForward(row, column, temp);\r\n                    } else { // 击中数字块\r\n                        temp[row][column].selected = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        this.setState({\r\n            table: temp\r\n        })\r\n    }\r\n\r\n    // 快进，若左击到一个空方块，以该空方快为中心快速扫雷打开一片空区域\r\n    fastForward (row, column, table) {\r\n        // 若为雷，结束递归\r\n        if (table[row][column].hasMine) {\r\n            return;\r\n        }\r\n        // 若已点击，结束递归\r\n        if (table[row][column].selected) {\r\n            return;\r\n        }\r\n        // 若已标记旗子，结束递归\r\n        if (table[row][column].hasFlag) {\r\n            return;\r\n        }\r\n        \r\n        table[row][column].selected = true;\r\n\r\n        // 若number > 0，结束递归\r\n        if (table[row][column].number !== 0) {\r\n            return;\r\n        }\r\n        \r\n        // 遍历九宫格\r\n        for (let m = row - 1; m <= row + 1; m++) {\r\n            for (let n = column - 1; n <= column + 1; n++) {\r\n                // 处理边界情况\r\n                if (m < 0 || m >= this.state.row || n < 0 || n >= this.state.column) {\r\n                    continue;\r\n                }\r\n                this.fastForward(m, n, table);\r\n            }\r\n        }\r\n    }\r\n\r\n    render () {\r\n        let mineSweeperTable = this.state.table.map((row, rowIndex) => {\r\n            return (\r\n                <div className='mine-sweeper-row' key={'row' + rowIndex}>\r\n                    {\r\n                        row.map((item, columnIndex) => {\r\n                            return (\r\n                                <div \r\n                                    className={\r\n                                        item.selected \r\n                                        ? 'mine-sweeper-item mine-sweeper-item-selected' \r\n                                        : 'mine-sweeper-item'\r\n                                    } \r\n                                    key={'row' + rowIndex + '-column' + columnIndex}\r\n                                    onMouseUp={(e) => this.onMouseUp(rowIndex, columnIndex, e)}\r\n                                    style={\r\n                                        rowIndex === this.state.boomRow && columnIndex === this.state.boomColumn\r\n                                        ? {backgroundColor: '#F56C6C'}\r\n                                        : null\r\n                                    }\r\n                                >\r\n                                    {\r\n                                        item.hasFlag ? '🚩' : null\r\n                                    }\r\n                                    {\r\n                                        item.selected\r\n                                        ?\r\n                                            item.hasMine\r\n                                            ? '💣'\r\n                                            :\r\n                                            <span className={'mine-sweeper-item-number-' + item.number}>\r\n                                                {item.number !== 0 ? item.number : null}\r\n                                            </span>\r\n                                        : null\r\n                                    }\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <div>\r\n                <div className='mine-sweeper-start'>\r\n                    <span className='mine-sweeper-start-btn' onClick={this.restart}>\r\n                        重新开始\r\n                    </span>\r\n                </div>\r\n                <div className='mine-sweeper-flagCount'>\r\n                    {'🚩 X ' + this.state.flagCount}\r\n                </div>\r\n                <div className='mine-sweeper-params'>\r\n                    <span className='mine-sweeper-params-item mine-sweeper-params-item-1'>\r\n                        行数：\r\n                        <input onChange={(e) => this.onRowChange(e)} value={this.state.row} />\r\n                    </span>\r\n                    <span className='mine-sweeper-params-item mine-sweeper-params-item-2'>\r\n                        列数：\r\n                        <input onChange={(e) => this.onColumnChange(e)} value={this.state.column} />\r\n                    </span>\r\n                    <span className='mine-sweeper-params-item mine-sweeper-params-item-3'>\r\n                        雷数：\r\n                        <input onChange={(e) => this.onMineCountChange(e)} value={this.state.mineCount} />\r\n                    </span>\r\n                </div>\r\n                <div \r\n                    className='mine-sweeper' \r\n                    onContextMenu={(e) => {e.preventDefault()}}\r\n                    style={{width: this.state.column * 30, height: this.state.row * 30}}\r\n                >\r\n                    {mineSweeperTable}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Index;","import React from 'react';\r\n\r\nimport Index from './pages/index/index'\r\n\r\nclass App extends React.Component {\r\n    render () {\r\n        return (\r\n            <Index />\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}