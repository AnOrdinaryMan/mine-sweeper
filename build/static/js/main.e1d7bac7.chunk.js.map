{"version":3,"sources":["pages/index/index.js","App.js","index.js"],"names":["Index","restart","init","state","row","column","mineCount","table","flagCount","boomRow","boomColumn","Array","this","fill","map","i","length","j","obj","Object","create","selected","hasMine","hasFlag","number","randomRow","Math","floor","random","randomColumn","m","n","setState","console","log","e","isNaN","parseInt","target","value","alert","String","count","temp","button","setTimeout","fastForward","ifWin","mineSweeperTable","rowIndex","className","key","item","columnIndex","onMouseUp","style","backgroundColor","onClick","onChange","onRowChange","onColumnChange","onMineCountChange","onContextMenu","preventDefault","width","height","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e1d7bac7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './index.css'\r\n\r\nclass Index extends React.Component {\r\n    constructor () {\r\n        super();\r\n        this.state = {\r\n            // 行数\r\n            row: 10,\r\n            // 列数\r\n            column: 10,\r\n            // 雷数\r\n            mineCount: 10,\r\n            // 表格\r\n            table: [[]],\r\n            // 旗子数\r\n            flagCount: 0,\r\n            // 保存爆炸的地点\r\n            boomRow: -1,\r\n            boomColumn: -1\r\n        }\r\n    }\r\n\r\n    init () {\r\n        // 表格初始化\r\n        let table = new Array(this.state.row).fill(null);\r\n        table = table.map(() => new Array(this.state.column).fill(null));\r\n        for (let i = 0; i < table.length; i++) {\r\n            for (let j = 0; j < table[i].length; j++) {\r\n                let obj = Object.create(null);\r\n\r\n                obj.selected = false; // 是否已点击\r\n                obj.hasMine = false; // 是否藏有地雷\r\n                obj.hasFlag = false; // 是否标记旗子\r\n                obj.number = 0; // 九宫格内地雷的数量\r\n\r\n                table[i][j] = obj;\r\n            }\r\n        }\r\n\r\n        // 随机布雷 💣\r\n        let mineCount = this.state.mineCount;\r\n        while (mineCount) {\r\n            let randomRow = Math.floor(Math.random() * this.state.row);\r\n            let randomColumn = Math.floor(Math.random() * this.state.column);\r\n            if (table[randomRow][randomColumn].hasMine) {\r\n                continue;\r\n            }\r\n            table[randomRow][randomColumn].hasMine = true;\r\n            mineCount--;\r\n        }\r\n\r\n        // 生成九宫格内地雷的数量\r\n        for (let i = 0; i < table.length; i++) {\r\n            for (let j = 0; j < table[i].length; j++) {\r\n                // 若此格为地雷，跳过\r\n                if (table[i][j].hasMine) {\r\n                    continue;\r\n                }\r\n                // 遍历九宫格\r\n                for (let m = i - 1; m <= i + 1; m++) {\r\n                    for (let n = j - 1; n <= j + 1; n++) {\r\n                        // 处理边界情况\r\n                        if (m < 0 || m >= this.state.row || n < 0 || n >= this.state.column) {\r\n                            continue;\r\n                        }\r\n                        if (table[m][n].hasMine) {\r\n                            table[i][j].number += 1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            table: table,\r\n            flagCount: 0,\r\n            boomRow: -1,\r\n            boomColumn: -1\r\n        }, () => { console.log(this.state.table) });\r\n    }\r\n\r\n    componentWillMount () {\r\n        this.init();\r\n    }\r\n\r\n    // 重新开始\r\n    restart = () => {\r\n        this.init();\r\n    }\r\n\r\n    // 修改行数\r\n    onRowChange (e) {\r\n        if (isNaN(parseInt(e.target.value))) {\r\n            this.setState({\r\n                row: 1,\r\n                mineCount: 1\r\n            }, () => {\r\n                this.init();\r\n            });\r\n        } else {\r\n            if (parseInt(e.target.value) > 99) {\r\n                alert('行数不能超过99！');\r\n                return;\r\n            }\r\n            if (String(parseInt(e.target.value)).length !== e.target.value.length) {\r\n                return;\r\n            }\r\n            this.setState({\r\n                row: parseInt(e.target.value),\r\n                mineCount: 1\r\n            }, () => {\r\n                this.init();\r\n            });\r\n        }\r\n    }\r\n\r\n    // 修改列数\r\n    onColumnChange (e) {\r\n        if (isNaN(parseInt(e.target.value))) {\r\n            this.setState({\r\n                column: 1,\r\n                mineCount: 1\r\n            }, () => {\r\n                this.init();\r\n            });\r\n        } else {\r\n            if (parseInt(e.target.value) > 99) {\r\n                alert('列数不能超过99！');\r\n                return;\r\n            }\r\n            if (String(parseInt(e.target.value)).length !== e.target.value.length) {\r\n                return;\r\n            }\r\n            this.setState({\r\n                column: parseInt(e.target.value),\r\n                mineCount: 1\r\n            }, () => {\r\n                this.init();\r\n            });\r\n        }\r\n    }\r\n\r\n    // 修改雷数\r\n    onMineCountChange (e) {\r\n        if (isNaN(parseInt(e.target.value))) {\r\n            this.setState({\r\n                mineCount: 1\r\n            }, () => {\r\n                this.init();\r\n            });\r\n        } else {\r\n            if (parseInt(e.target.value) > this.state.row * this.state.column) {\r\n                alert('雷数不能超过格子的数量！');\r\n                return;\r\n            }\r\n            this.setState({\r\n                mineCount: parseInt(e.target.value)\r\n            }, () => {\r\n                this.init();\r\n            });\r\n        }\r\n    }\r\n\r\n    // 判断是否胜利\r\n    ifWin (table) {\r\n        let count = 0;\r\n        for (let i = 0; i < table.length; i++) {\r\n            for (let j = 0; j < table[i].length; j++) {\r\n                if (table[i][j].selected) {\r\n                    count++;\r\n                }\r\n            }\r\n        }\r\n        if (count === this.state.row * this.state.column - this.state.mineCount) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    onMouseUp (row, column, e) {\r\n        console.log(row, column);\r\n        let temp = this.state.table;\r\n\r\n        if (e.button === 2) { // 右击标记旗子\r\n            // 若已左击过，无法标记旗子\r\n            if (temp[row][column].selected === false) {\r\n                if (temp[row][column].hasFlag) {\r\n                    this.setState({\r\n                        flagCount: this.state.flagCount - 1\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        flagCount: this.state.flagCount + 1\r\n                    })\r\n                }\r\n                temp[row][column].hasFlag = !temp[row][column].hasFlag;\r\n            }\r\n        } else { // 左击\r\n            // 若已左击过，无法左击\r\n            // 若已标记旗子，无法左击\r\n            if (temp[row][column].selected === false && temp[row][column].hasFlag === false) {\r\n                // 击中地雷，游戏结束\r\n                if (temp[row][column].hasMine) {\r\n                    for (let i = 0; i < temp.length; i++) {\r\n                        for (let j = 0; j < temp[i].length; j++) {\r\n                            temp[i][j].hasFlag = false;\r\n                            temp[i][j].selected = true;\r\n                        }\r\n                    }\r\n                    // 记录爆炸的地点\r\n                    this.setState({\r\n                        boomRow: row,\r\n                        boomColumn: column\r\n                    })\r\n\r\n                    setTimeout(() => {\r\n                        alert('💣💣💣 Boom ！！！');\r\n                    });\r\n                } else { // 未击中地雷\r\n                    // 击中空方块，快进，以该空方快为中心快速扫雷打开一片空区域\r\n                    if (temp[row][column].number === 0) {\r\n                        this.fastForward(row, column, temp);\r\n                    } else { // 击中数字块\r\n                        temp[row][column].selected = true;\r\n                    }\r\n                    // 胜利 \r\n                    if (this.ifWin(temp)) {\r\n                        for (let i = 0; i < temp.length; i++) {\r\n                            for (let j = 0; j < temp[i].length; j++) {\r\n                                temp[i][j].hasFlag = false;\r\n                                temp[i][j].selected = true;\r\n                            }\r\n                        }\r\n                        this.setState({\r\n                            flagCount: 0\r\n                        });\r\n                        setTimeout(() => {\r\n                            alert('🚩🚩🚩 Win ！！！');\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        this.setState({\r\n            table: temp\r\n        })\r\n    }\r\n\r\n    // 快进，若左击到一个空方块，以该空方快为中心快速扫雷打开一片空区域\r\n    fastForward (row, column, table) {\r\n        // 若为雷，结束递归\r\n        if (table[row][column].hasMine) {\r\n            return;\r\n        }\r\n        // 若已点击，结束递归\r\n        if (table[row][column].selected) {\r\n            return;\r\n        }\r\n        // 若已标记旗子，结束递归\r\n        if (table[row][column].hasFlag) {\r\n            return;\r\n        }\r\n        \r\n        table[row][column].selected = true;\r\n\r\n        // 若number > 0，结束递归\r\n        if (table[row][column].number !== 0) {\r\n            return;\r\n        }\r\n        \r\n        // 遍历九宫格\r\n        for (let m = row - 1; m <= row + 1; m++) {\r\n            for (let n = column - 1; n <= column + 1; n++) {\r\n                // 处理边界情况\r\n                if (m < 0 || m >= this.state.row || n < 0 || n >= this.state.column) {\r\n                    continue;\r\n                }\r\n                this.fastForward(m, n, table);\r\n            }\r\n        }\r\n    }\r\n\r\n    render () {\r\n        let mineSweeperTable = this.state.table.map((row, rowIndex) => {\r\n            return (\r\n                <div className='mine-sweeper-row' key={'row' + rowIndex}>\r\n                    {\r\n                        row.map((item, columnIndex) => {\r\n                            return (\r\n                                <div \r\n                                    className={\r\n                                        item.selected \r\n                                        ? 'mine-sweeper-item mine-sweeper-item-selected' \r\n                                        : 'mine-sweeper-item'\r\n                                    } \r\n                                    key={'row' + rowIndex + '-column' + columnIndex}\r\n                                    onMouseUp={(e) => this.onMouseUp(rowIndex, columnIndex, e)}\r\n                                    style={\r\n                                        rowIndex === this.state.boomRow && columnIndex === this.state.boomColumn\r\n                                        ? {backgroundColor: '#F56C6C'}\r\n                                        : null\r\n                                    }\r\n                                >\r\n                                    {\r\n                                        item.hasFlag ? '🚩' : null\r\n                                    }\r\n                                    {\r\n                                        item.selected\r\n                                        ?\r\n                                            item.hasMine\r\n                                            ? '💣'\r\n                                            :\r\n                                            <span className={'mine-sweeper-item-number-' + item.number}>\r\n                                                {item.number !== 0 ? item.number : null}\r\n                                            </span>\r\n                                        : null\r\n                                    }\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <div>\r\n                <div className='mine-sweeper-start'>\r\n                    <span className='mine-sweeper-start-btn' onClick={this.restart}>\r\n                        重新开始\r\n                    </span>\r\n                </div>\r\n                <div className='mine-sweeper-flagCount'>\r\n                    {'🚩 X ' + this.state.flagCount}\r\n                </div>\r\n                <div className='mine-sweeper-params'>\r\n                    <span className='mine-sweeper-params-item mine-sweeper-params-item-1'>\r\n                        行数：\r\n                        <input onChange={(e) => this.onRowChange(e)} value={this.state.row} />\r\n                    </span>\r\n                    <span className='mine-sweeper-params-item mine-sweeper-params-item-2'>\r\n                        列数：\r\n                        <input onChange={(e) => this.onColumnChange(e)} value={this.state.column} />\r\n                    </span>\r\n                    <span className='mine-sweeper-params-item mine-sweeper-params-item-3'>\r\n                        雷数：\r\n                        <input onChange={(e) => this.onMineCountChange(e)} value={this.state.mineCount} />\r\n                    </span>\r\n                </div>\r\n                <div \r\n                    className='mine-sweeper' \r\n                    onContextMenu={(e) => {e.preventDefault()}}\r\n                    style={{width: this.state.column * 30, height: this.state.row * 30}}\r\n                >\r\n                    {mineSweeperTable}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Index;","import React from 'react';\r\n\r\nimport Index from './pages/index/index'\r\n\r\nclass App extends React.Component {\r\n    render () {\r\n        return (\r\n            <Index />\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}